/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package serializers.thrift.media;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Media implements TBase<Media, Media._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Media");

  private static final TField URI_FIELD_DESC = new TField("uri", TType.STRING, (short)1);
  private static final TField TITLE_FIELD_DESC = new TField("title", TType.STRING, (short)2);
  private static final TField WIDTH_FIELD_DESC = new TField("width", TType.I32, (short)3);
  private static final TField HEIGHT_FIELD_DESC = new TField("height", TType.I32, (short)4);
  private static final TField FORMAT_FIELD_DESC = new TField("format", TType.STRING, (short)5);
  private static final TField DURATION_FIELD_DESC = new TField("duration", TType.I64, (short)6);
  private static final TField SIZE_FIELD_DESC = new TField("size", TType.I64, (short)7);
  private static final TField BITRATE_FIELD_DESC = new TField("bitrate", TType.I32, (short)8);
  private static final TField PERSON_FIELD_DESC = new TField("person", TType.LIST, (short)9);
  private static final TField PLAYER_FIELD_DESC = new TField("player", TType.I32, (short)10);
  private static final TField COPYRIGHT_FIELD_DESC = new TField("copyright", TType.STRING, (short)11);

  private String uri;
  private String title;
  private int width;
  private int height;
  private String format;
  private long duration;
  private long size;
  private int bitrate;
  private List<String> person;
  private Player player;
  private String copyright;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    URI((short)1, "uri"),
    TITLE((short)2, "title"),
    WIDTH((short)3, "width"),
    HEIGHT((short)4, "height"),
    FORMAT((short)5, "format"),
    DURATION((short)6, "duration"),
    SIZE((short)7, "size"),
    BITRATE((short)8, "bitrate"),
    PERSON((short)9, "person"),
    /**
     * 
     * @see Player
     */
    PLAYER((short)10, "player"),
    COPYRIGHT((short)11, "copyright");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URI
          return URI;
        case 2: // TITLE
          return TITLE;
        case 3: // WIDTH
          return WIDTH;
        case 4: // HEIGHT
          return HEIGHT;
        case 5: // FORMAT
          return FORMAT;
        case 6: // DURATION
          return DURATION;
        case 7: // SIZE
          return SIZE;
        case 8: // BITRATE
          return BITRATE;
        case 9: // PERSON
          return PERSON;
        case 10: // PLAYER
          return PLAYER;
        case 11: // COPYRIGHT
          return COPYRIGHT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WIDTH_ISSET_ID = 0;
  private static final int __HEIGHT_ISSET_ID = 1;
  private static final int __DURATION_ISSET_ID = 2;
  private static final int __SIZE_ISSET_ID = 3;
  private static final int __BITRATE_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URI, new FieldMetaData("uri", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TITLE, new FieldMetaData("title", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.WIDTH, new FieldMetaData("width", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I32        , "int")));
    tmpMap.put(_Fields.HEIGHT, new FieldMetaData("height", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I32        , "int")));
    tmpMap.put(_Fields.FORMAT, new FieldMetaData("format", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DURATION, new FieldMetaData("duration", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I64        , "long")));
    tmpMap.put(_Fields.SIZE, new FieldMetaData("size", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I64        , "long")));
    tmpMap.put(_Fields.BITRATE, new FieldMetaData("bitrate", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32        , "int")));
    tmpMap.put(_Fields.PERSON, new FieldMetaData("person", TFieldRequirementType.REQUIRED, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.PLAYER, new FieldMetaData("player", TFieldRequirementType.REQUIRED, 
        new EnumMetaData(TType.ENUM, Player.class)));
    tmpMap.put(_Fields.COPYRIGHT, new FieldMetaData("copyright", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Media.class, metaDataMap);
  }

  public Media() {
  }

  public Media(
    String uri,
    int width,
    int height,
    String format,
    long duration,
    long size,
    List<String> person,
    Player player)
  {
    this();
    this.uri = uri;
    this.width = width;
    setWidthIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.format = format;
    this.duration = duration;
    setDurationIsSet(true);
    this.size = size;
    setSizeIsSet(true);
    this.person = person;
    this.player = player;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Media(Media other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.width = other.width;
    this.height = other.height;
    if (other.isSetFormat()) {
      this.format = other.format;
    }
    this.duration = other.duration;
    this.size = other.size;
    this.bitrate = other.bitrate;
    if (other.isSetPerson()) {
      List<String> __this__person = new ArrayList<String>();
      for (String other_element : other.person) {
        __this__person.add(other_element);
      }
      this.person = __this__person;
    }
    if (other.isSetPlayer()) {
      this.player = other.player;
    }
    if (other.isSetCopyright()) {
      this.copyright = other.copyright;
    }
  }

  public Media deepCopy() {
    return new Media(this);
  }

  @Deprecated
  public Media clone() {
    return new Media(this);
  }

  @Override
  public void clear() {
    this.uri = null;
    this.title = null;
    setWidthIsSet(false);
    this.width = 0;
    setHeightIsSet(false);
    this.height = 0;
    this.format = null;
    setDurationIsSet(false);
    this.duration = 0;
    setSizeIsSet(false);
    this.size = 0;
    setBitrateIsSet(false);
    this.bitrate = 0;
    this.person = null;
    this.player = null;
    this.copyright = null;
  }

  public String getUri() {
    return this.uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been asigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been asigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getWidth() {
    return this.width;
  }

  public void setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
  }

  public void unsetWidth() {
    __isset_bit_vector.clear(__WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been asigned a value) and false otherwise */
  public boolean isSetWidth() {
    return __isset_bit_vector.get(__WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bit_vector.set(__WIDTH_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public void setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
  }

  public void unsetHeight() {
    __isset_bit_vector.clear(__HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been asigned a value) and false otherwise */
  public boolean isSetHeight() {
    return __isset_bit_vector.get(__HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bit_vector.set(__HEIGHT_ISSET_ID, value);
  }

  public String getFormat() {
    return this.format;
  }

  public void setFormat(String format) {
    this.format = format;
  }

  public void unsetFormat() {
    this.format = null;
  }

  /** Returns true if field format is set (has been asigned a value) and false otherwise */
  public boolean isSetFormat() {
    return this.format != null;
  }

  public void setFormatIsSet(boolean value) {
    if (!value) {
      this.format = null;
    }
  }

  public long getDuration() {
    return this.duration;
  }

  public void setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
  }

  public void unsetDuration() {
    __isset_bit_vector.clear(__DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been asigned a value) and false otherwise */
  public boolean isSetDuration() {
    return __isset_bit_vector.get(__DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bit_vector.set(__DURATION_ISSET_ID, value);
  }

  public long getSize() {
    return this.size;
  }

  public void setSize(long size) {
    this.size = size;
    setSizeIsSet(true);
  }

  public void unsetSize() {
    __isset_bit_vector.clear(__SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been asigned a value) and false otherwise */
  public boolean isSetSize() {
    return __isset_bit_vector.get(__SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bit_vector.set(__SIZE_ISSET_ID, value);
  }

  public int getBitrate() {
    return this.bitrate;
  }

  public void setBitrate(int bitrate) {
    this.bitrate = bitrate;
    setBitrateIsSet(true);
  }

  public void unsetBitrate() {
    __isset_bit_vector.clear(__BITRATE_ISSET_ID);
  }

  /** Returns true if field bitrate is set (has been asigned a value) and false otherwise */
  public boolean isSetBitrate() {
    return __isset_bit_vector.get(__BITRATE_ISSET_ID);
  }

  public void setBitrateIsSet(boolean value) {
    __isset_bit_vector.set(__BITRATE_ISSET_ID, value);
  }

  public int getPersonSize() {
    return (this.person == null) ? 0 : this.person.size();
  }

  public java.util.Iterator<String> getPersonIterator() {
    return (this.person == null) ? null : this.person.iterator();
  }

  public void addToPerson(String elem) {
    if (this.person == null) {
      this.person = new ArrayList<String>();
    }
    this.person.add(elem);
  }

  public List<String> getPerson() {
    return this.person;
  }

  public void setPerson(List<String> person) {
    this.person = person;
  }

  public void unsetPerson() {
    this.person = null;
  }

  /** Returns true if field person is set (has been asigned a value) and false otherwise */
  public boolean isSetPerson() {
    return this.person != null;
  }

  public void setPersonIsSet(boolean value) {
    if (!value) {
      this.person = null;
    }
  }

  /**
   * 
   * @see Player
   */
  public Player getPlayer() {
    return this.player;
  }

  /**
   * 
   * @see Player
   */
  public void setPlayer(Player player) {
    this.player = player;
  }

  public void unsetPlayer() {
    this.player = null;
  }

  /** Returns true if field player is set (has been asigned a value) and false otherwise */
  public boolean isSetPlayer() {
    return this.player != null;
  }

  public void setPlayerIsSet(boolean value) {
    if (!value) {
      this.player = null;
    }
  }

  public String getCopyright() {
    return this.copyright;
  }

  public void setCopyright(String copyright) {
    this.copyright = copyright;
  }

  public void unsetCopyright() {
    this.copyright = null;
  }

  /** Returns true if field copyright is set (has been asigned a value) and false otherwise */
  public boolean isSetCopyright() {
    return this.copyright != null;
  }

  public void setCopyrightIsSet(boolean value) {
    if (!value) {
      this.copyright = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case FORMAT:
      if (value == null) {
        unsetFormat();
      } else {
        setFormat((String)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Long)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Long)value);
      }
      break;

    case BITRATE:
      if (value == null) {
        unsetBitrate();
      } else {
        setBitrate((Integer)value);
      }
      break;

    case PERSON:
      if (value == null) {
        unsetPerson();
      } else {
        setPerson((List<String>)value);
      }
      break;

    case PLAYER:
      if (value == null) {
        unsetPlayer();
      } else {
        setPlayer((Player)value);
      }
      break;

    case COPYRIGHT:
      if (value == null) {
        unsetCopyright();
      } else {
        setCopyright((String)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URI:
      return getUri();

    case TITLE:
      return getTitle();

    case WIDTH:
      return new Integer(getWidth());

    case HEIGHT:
      return new Integer(getHeight());

    case FORMAT:
      return getFormat();

    case DURATION:
      return new Long(getDuration());

    case SIZE:
      return new Long(getSize());

    case BITRATE:
      return new Integer(getBitrate());

    case PERSON:
      return getPerson();

    case PLAYER:
      return getPlayer();

    case COPYRIGHT:
      return getCopyright();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case URI:
      return isSetUri();
    case TITLE:
      return isSetTitle();
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case FORMAT:
      return isSetFormat();
    case DURATION:
      return isSetDuration();
    case SIZE:
      return isSetSize();
    case BITRATE:
      return isSetBitrate();
    case PERSON:
      return isSetPerson();
    case PLAYER:
      return isSetPlayer();
    case COPYRIGHT:
      return isSetCopyright();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Media)
      return this.equals((Media)that);
    return false;
  }

  public boolean equals(Media that) {
    if (that == null)
      return false;

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_format = true && this.isSetFormat();
    boolean that_present_format = true && that.isSetFormat();
    if (this_present_format || that_present_format) {
      if (!(this_present_format && that_present_format))
        return false;
      if (!this.format.equals(that.format))
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_bitrate = true && this.isSetBitrate();
    boolean that_present_bitrate = true && that.isSetBitrate();
    if (this_present_bitrate || that_present_bitrate) {
      if (!(this_present_bitrate && that_present_bitrate))
        return false;
      if (this.bitrate != that.bitrate)
        return false;
    }

    boolean this_present_person = true && this.isSetPerson();
    boolean that_present_person = true && that.isSetPerson();
    if (this_present_person || that_present_person) {
      if (!(this_present_person && that_present_person))
        return false;
      if (!this.person.equals(that.person))
        return false;
    }

    boolean this_present_player = true && this.isSetPlayer();
    boolean that_present_player = true && that.isSetPlayer();
    if (this_present_player || that_present_player) {
      if (!(this_present_player && that_present_player))
        return false;
      if (!this.player.equals(that.player))
        return false;
    }

    boolean this_present_copyright = true && this.isSetCopyright();
    boolean that_present_copyright = true && that.isSetCopyright();
    if (this_present_copyright || that_present_copyright) {
      if (!(this_present_copyright && that_present_copyright))
        return false;
      if (!this.copyright.equals(that.copyright))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_uri = true && (isSetUri());
    builder.append(present_uri);
    if (present_uri)
      builder.append(uri);

    boolean present_title = true && (isSetTitle());
    builder.append(present_title);
    if (present_title)
      builder.append(title);

    boolean present_width = true;
    builder.append(present_width);
    if (present_width)
      builder.append(width);

    boolean present_height = true;
    builder.append(present_height);
    if (present_height)
      builder.append(height);

    boolean present_format = true && (isSetFormat());
    builder.append(present_format);
    if (present_format)
      builder.append(format);

    boolean present_duration = true;
    builder.append(present_duration);
    if (present_duration)
      builder.append(duration);

    boolean present_size = true;
    builder.append(present_size);
    if (present_size)
      builder.append(size);

    boolean present_bitrate = true && (isSetBitrate());
    builder.append(present_bitrate);
    if (present_bitrate)
      builder.append(bitrate);

    boolean present_person = true && (isSetPerson());
    builder.append(present_person);
    if (present_person)
      builder.append(person);

    boolean present_player = true && (isSetPlayer());
    builder.append(present_player);
    if (present_player)
      builder.append(player.getValue());

    boolean present_copyright = true && (isSetCopyright());
    builder.append(present_copyright);
    if (present_copyright)
      builder.append(copyright);

    return builder.toHashCode();
  }

  public int compareTo(Media other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Media typedOther = (Media)other;

    lastComparison = Boolean.valueOf(isSetUri()).compareTo(typedOther.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {      lastComparison = TBaseHelper.compareTo(this.uri, typedOther.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {      lastComparison = TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(typedOther.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {      lastComparison = TBaseHelper.compareTo(this.width, typedOther.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {      lastComparison = TBaseHelper.compareTo(this.height, typedOther.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormat()).compareTo(typedOther.isSetFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat()) {      lastComparison = TBaseHelper.compareTo(this.format, typedOther.format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {      lastComparison = TBaseHelper.compareTo(this.duration, typedOther.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {      lastComparison = TBaseHelper.compareTo(this.size, typedOther.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBitrate()).compareTo(typedOther.isSetBitrate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBitrate()) {      lastComparison = TBaseHelper.compareTo(this.bitrate, typedOther.bitrate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerson()).compareTo(typedOther.isSetPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerson()) {      lastComparison = TBaseHelper.compareTo(this.person, typedOther.person);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayer()).compareTo(typedOther.isSetPlayer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayer()) {      lastComparison = TBaseHelper.compareTo(this.player, typedOther.player);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCopyright()).compareTo(typedOther.isSetCopyright());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCopyright()) {      lastComparison = TBaseHelper.compareTo(this.copyright, typedOther.copyright);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // URI
          if (field.type == TType.STRING) {
            this.uri = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TITLE
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // WIDTH
          if (field.type == TType.I32) {
            this.width = iprot.readI32();
            setWidthIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // HEIGHT
          if (field.type == TType.I32) {
            this.height = iprot.readI32();
            setHeightIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // FORMAT
          if (field.type == TType.STRING) {
            this.format = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // DURATION
          if (field.type == TType.I64) {
            this.duration = iprot.readI64();
            setDurationIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SIZE
          if (field.type == TType.I64) {
            this.size = iprot.readI64();
            setSizeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // BITRATE
          if (field.type == TType.I32) {
            this.bitrate = iprot.readI32();
            setBitrateIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // PERSON
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.person = new ArrayList<String>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                String _elem2;
                _elem2 = iprot.readString();
                this.person.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // PLAYER
          if (field.type == TType.I32) {
            this.player = Player.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // COPYRIGHT
          if (field.type == TType.STRING) {
            this.copyright = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.uri != null) {
      oprot.writeFieldBegin(URI_FIELD_DESC);
      oprot.writeString(this.uri);
      oprot.writeFieldEnd();
    }
    if (this.title != null) {
      if (isSetTitle()) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(WIDTH_FIELD_DESC);
    oprot.writeI32(this.width);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
    oprot.writeI32(this.height);
    oprot.writeFieldEnd();
    if (this.format != null) {
      oprot.writeFieldBegin(FORMAT_FIELD_DESC);
      oprot.writeString(this.format);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DURATION_FIELD_DESC);
    oprot.writeI64(this.duration);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SIZE_FIELD_DESC);
    oprot.writeI64(this.size);
    oprot.writeFieldEnd();
    if (isSetBitrate()) {
      oprot.writeFieldBegin(BITRATE_FIELD_DESC);
      oprot.writeI32(this.bitrate);
      oprot.writeFieldEnd();
    }
    if (this.person != null) {
      oprot.writeFieldBegin(PERSON_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.person.size()));
        for (String _iter3 : this.person)
        {
          oprot.writeString(_iter3);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.player != null) {
      oprot.writeFieldBegin(PLAYER_FIELD_DESC);
      oprot.writeI32(this.player.getValue());
      oprot.writeFieldEnd();
    }
    if (this.copyright != null) {
      if (isSetCopyright()) {
        oprot.writeFieldBegin(COPYRIGHT_FIELD_DESC);
        oprot.writeString(this.copyright);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Media(");
    boolean first = true;

    sb.append("uri:");
    if (this.uri == null) {
      sb.append("null");
    } else {
      sb.append(this.uri);
    }
    first = false;
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("format:");
    if (this.format == null) {
      sb.append("null");
    } else {
      sb.append(this.format);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (isSetBitrate()) {
      if (!first) sb.append(", ");
      sb.append("bitrate:");
      sb.append(this.bitrate);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("person:");
    if (this.person == null) {
      sb.append("null");
    } else {
      sb.append(this.person);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("player:");
    if (this.player == null) {
      sb.append("null");
    } else {
      sb.append(this.player);
    }
    first = false;
    if (isSetCopyright()) {
      if (!first) sb.append(", ");
      sb.append("copyright:");
      if (this.copyright == null) {
        sb.append("null");
      } else {
        sb.append(this.copyright);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (!isSetWidth()) {
      throw new TProtocolException("Required field 'width' is unset! Struct:" + toString());
    }

    if (!isSetHeight()) {
      throw new TProtocolException("Required field 'height' is unset! Struct:" + toString());
    }

    if (!isSetFormat()) {
      throw new TProtocolException("Required field 'format' is unset! Struct:" + toString());
    }

    if (!isSetDuration()) {
      throw new TProtocolException("Required field 'duration' is unset! Struct:" + toString());
    }

    if (!isSetSize()) {
      throw new TProtocolException("Required field 'size' is unset! Struct:" + toString());
    }

    if (!isSetPerson()) {
      throw new TProtocolException("Required field 'person' is unset! Struct:" + toString());
    }

    if (!isSetPlayer()) {
      throw new TProtocolException("Required field 'player' is unset! Struct:" + toString());
    }

  }

}

